{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todo.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","borderBottom","props","todo","completed","this","id","description","type","onChange","markComplete","bind","checkboxStyle","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","boxShadow","Todos","todos","map","key","AddTodo","text","console","log","className","addDivStyle","addTodo","display","alignSelf","fontSize","About","Fragment","App","state","counter","setState","filter","length","taskObject","todosLength","flag","newTodo","includes","concat","setInterval","exact","path","render","Todo","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38740723.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>React App</h1>\r\n      <Link style={linkStyle} to=\"/my-app\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n    </header>\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n  background: '#333',\r\n  color: '#fff',\r\n  textAlign: 'center',\r\n  padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n  color: '#fff',\r\n  textDecoration: 'none'\r\n}\r\n\r\nexport default Header;","  \r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      background:'#00FFFF',  \r\n      padding: '10px',\r\n      borderBottom: '1px #ccc dotted',\r\n      textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { id, description } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id) } style={checkboxStyle}/> {' '}\r\n          { description }\r\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>Delete</button>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nconst btnStyle = {\r\n  background: '#ff0000',\r\n  color: '#fff',\r\n  border: 'none',\r\n  padding: '10px 19px',\r\n  borderRadius: '50%',\r\n  cursor: 'pointer',\r\n  float: 'right'\r\n}\r\nconst checkboxStyle = {\r\n  boxShadow: '0 0 0 5px orange'\r\n\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n    ));\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component { \r\n\r\n  render() {\r\n    const {id, text} = this.props;    \r\n     console.log(text);\r\n    return (\r\n      <div className=\"addDiv\" style={addDivStyle}>        \r\n        <button onClick={this.props.addTodo.bind(this, id)} style={btnStyle}>Add Todo</button>\r\n        <p/>{''} {text}       \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired\r\n}\r\nconst addDivStyle ={\r\n  display: 'flex', \r\n  alignSelf: 'center'\r\n}\r\nconst btnStyle = {\r\n  background: '#008000',\r\n  color: '#fff',\r\n  border: 'none',\r\n  padding: '10px 15px',\r\n  borderRadius: '70%',\r\n  cursor: 'pointer',\r\n  fontSize: '20px' \r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>This is the TodoList app. It is part of a React course in HackYourFuture</p>\r\n      <p>You can add your to do lists and delete one by one by clicking \"Add Todo\" and Delete button respectively.</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default About;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Header from './components/layout/Header';\r\nimport Todos from './components/Todo';\r\nimport AddTodo from './components/AddTodo';\r\nimport About from './components/pages/About';\r\n\r\nimport './App.css';\r\n//App component class\r\nclass App extends Component {\r\n\tstate = {\r\n\t\ttodos: [],\r\n    counter:0,\r\n    text: \"No Item\"\r\n\t};\r\n  //excuted when the component is mounted\r\n\tcomponentDidMount() {\r\n\t\tsetInterval(() => {\r\n      this.setState({counter: this.state.counter+1})\r\n    }, 1000);\r\n\t}\r\n\r\n\t// Toggle Complete\r\n\tmarkComplete = (id) => {\r\n\t\tthis.setState({\r\n\t\t\ttodos: this.state.todos.map((todo) => {\r\n\t\t\t\tif (todo.id === id) {\r\n\t\t\t\t\ttodo.completed = !todo.completed;\r\n\t\t\t\t}\r\n\t\t\t\treturn todo;\r\n\t\t\t})\r\n\t\t});\r\n\t};\r\n  // Delete Todo\r\n  delTodo = (id) => {  \r\n        this.setState({\r\n          todos: [...this.state.todos.filter((todo) => todo.id !== id)]\r\n        })\r\n        if(this.state.todos.length ===1)\r\n          this.setState({text: 'No Item'}); \r\n        console.log(this.state.todos);   \r\n  };\r\n\r\n  // Add Todo\r\n  addTodo = () => {\r\n    const taskObject = [{ id: 1, description : \"Get out of bed\" },\r\n                        { id: 2, description : \"Brush teeth\" },\r\n                        { id: 3, description : \"Eat breakfast\" }]; \r\n    //const randomIndex = Math.floor(Math.random() * Math.floor(3));    \r\n    let todosLength=this.state.todos.length;\r\n    let flag = false;\r\n    while((todosLength < taskObject.length ) && !flag){       \r\n      const  newTodo = taskObject[todosLength];\r\n      if(this.state.todos.includes(newTodo)) \r\n        todosLength += 1;\r\n      else{\r\n        this.setState({ todos: this.state.todos.concat(newTodo) }); \r\n        flag = true;\r\n      }          \r\n    }; \r\n    if(this.state.todos)\r\n      this.setState({text: ''});   \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className='App'>\r\n          <div className='container'>\r\n            <Header />\r\n            <Route\r\n              exact\r\n              path='/my-app' \r\n              render={(props) => (\r\n                <React.Fragment>\r\n                  <h1>Tasks Todo</h1>\r\n                  <h1>You have used {this.state.counter} seconds on this website</h1>\r\n                  <div className=\"todoForm\">\r\n                    <AddTodo todos={this.state.todos} addTodo={this.addTodo} text={this.state.text}/>\r\n                    <Todos\r\n                      todos={this.state.todos}\r\n                      markComplete={this.markComplete}\r\n                      delTodo={this.delTodo}\r\n                    />\r\n                  </div>\r\n                </React.Fragment>\r\n              )}\r\n            />\r\n            <Route path='/about' component={About} />\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}